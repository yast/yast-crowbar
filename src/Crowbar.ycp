/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Crowbar.ycp
 * Package:	Configuration of crowbar
 * Summary:	Crowbar settings, input and output functions
 * Authors:     Jiri Suchomel <jsuchome@suse.cz>
 *              Michal Filka <mfilka@suse.cz>
 *
 * $Id: Crowbar.ycp 41350 2007-10-10 16:59:00Z dfiser $
 *
 * Representation of the configuration of crowbar.
 * Input and output routines.
 */

{

module "Crowbar";
textdomain "crowbar";

import "FileUtils";
import "Json";
import "Progress";
import "Report";
import "Message";

/**
 * Path to the files with JSON data
 */
global string network_file = "/opt/dell/chef/data_bags/crowbar/bc-template-network.json";
global string crowbar_file = "/etc/crowbar/crowbar.json";
global string installed_file    = "/opt/dell/crowbar_framework/.crowbar-installed-ok";

/**
 * map of network template configuration data
 */
map<string,any> template_network = $[];

/**
 * map of crowbar template configuration data
 */
map<string,any> template_crowbar = $[];

/**
 * networks subset of global configuration map
 */
global map<string,map> networks = $[];

/**
 * network teaming subset of global configuration map
 */
global map<string,integer> teaming      = $[];

/**
 * network mode; valid values are: single | dual | team
 */
global string mode      = "single";

/**
 * users subset of global crowbar configuration map
 */
global map<string,map> users    = $[];

/**
 * If crowbar was installed
 */
global boolean installed        = false;

/**
 * Data was modified?
 */
boolean modified = false;

global map<string,any> adapt_map (map<string,any> input_map);

/**
 * Adapt boolean values so they can be recognized by Perl
 * BEWARE: this will break any real true/false string values
 */
any adapt_value (any value) {

  if (is (value, map))
  {
      return adapt_map ((map<string,any>) value);
  }
  if (is (value, list))
  {
      value = (list<any>) maplist (any item, (list<any>) value, {
          return adapt_value (item);
      });
      return value;
  }
  if (is (value, boolean))
  {
      return value == true ? "true" : "false";
  }
  return value;
}

global map<string,any> adapt_map (map<string,any> input_map) {

  foreach (string key, any val, input_map, {
    input_map[key]        = adapt_value (val);
  });
  return input_map;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}


/**
 * Read all crowbar settings
 * @return true on success
 */
global boolean Read() {

    /* Crowbar read dialog caption */
    string caption = _("Initializing crowbar Configuration");

    integer steps = 2;

    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    /* Progress stage */
	    _("Read the configuraton"),
	], [
	    /* Progress step */
	    _("Reading the configuration..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    installed   = FileUtils::Exists (installed_file);

    if (!FileUtils::Exists (network_file))
    {
        Report::Error (Message::CannotOpenFile (network_file));
        return false;
    }

    if (!FileUtils::Exists (crowbar_file))
    {
        Report::Error (Message::CannotOpenFile (crowbar_file));
        return false;
    }


    template_network    = Json::Read (network_file);
    networks            = template_network["attributes","network","networks"]:$[];
    teaming             = template_network["attributes","network","teaming"]:$[];
    mode                = template_network["attributes","network","mode"]:"";

    template_crowbar    = Json::Read (crowbar_file);
    users               = template_crowbar["attributes","crowbar","users"]:$[];

    Progress::NextStage();

    modified = false;
    return true;
}

/**
 * Write all crowbar settings
 * @return true on success
 */
global boolean Write() {

    /* Crowbar read dialog caption */
    string caption = _("Saving crowbar Configuration");

    integer steps = 1;

    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Write the settings"),
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );


    template_network["attributes","network","networks"] = networks;
    template_network["attributes","network","teaming"]  = teaming;
    template_network["attributes","network","mode"]     = mode;

    if (Json::Write (adapt_map (template_network), network_file) == nil)
    {
      Report::Error (Message::ErrorWritingFile (network_file));
    }

    template_crowbar["attributes","crowbar","users"]    = users;
    if (Json::Write (adapt_map (template_crowbar), crowbar_file) == nil)
    {
      Report::Error (Message::ErrorWritingFile (crowbar_file));
    }

    Progress::NextStage();

    return true;
}

/* EOF */
}
